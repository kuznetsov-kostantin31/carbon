// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

enum ROLE {
  USER
  EDITOR
  ADMIN
}

enum PRIORITY {
  LOW
  MEDIUM
  HIGH
  EXTRA
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name     String?
  email    String  @unique
  password String

  role ROLE @default(USER)

  spaces   Space[]   @relation("user_space")
  tasks    Task[]    @relation("user_task")
  projects Project[] @relation("user_project")

  job          Job?        @relation(fields: [jobId], references: [id])
  jobId        String?     @map("job_id")
  department   Department? @relation(fields: [departmentId], references: [id])
  departmentId String?     @map("department_id")

  @@map("user")
}

model Job {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title       String
  description String?

  users User[]

  @@map("job")
}

model Space {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title       String
  description String?

  users User[] @relation("user_space")

  @@map("space")
}

model Department {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title       String
  description String?
  color       String

  users User[]

  @@map("deparment")
}

model Project {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title       String
  description String?
  color       String

  users  User[]  @relation("user_project")
  boards Board[]

  @@map("project")
}

model Board {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title String

  columns Column[]

  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?  @map("project_id")

  @@map("board")
}

model Column {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title String
  color String

  board   Board?  @relation(fields: [boardId], references: [id])
  boardId String? @map("board_id")

  tasks Task[]

  @@map("column")
}

model Task {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title       String
  description String?
  priority    PRIORITY @default(MEDIUM)
  deadline    DateTime
  isCompleted Boolean  @default(false)
  order       Int      @default(1)
  color       String

  user User[] @relation("user_task")
  tags Tag[]  @relation("task_tag")

  column   Column? @relation(fields: [columnId], references: [id])
  columnId String? @map("column_id")

  @@map("task")
}

model Tag {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title String
  color String

  tasks Task[] @relation("task_tag")

  @@map("tag")
}
